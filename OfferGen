# =========================================================
# BigFix Offer Action Generator (Install / Update / Remove)
# Baseline: Offers-2025-09-24-v9
# - Fixed layout (inputs → buttons → log)
# - OfferDescriptionHTML with HTML-encoding (in CDATA)
# - Clean product name handling (no Install/Update/Remove prefixes)
# - Lowercase XML booleans
# - LLM integration to auto-draft Application Description
# =========================================================

Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing
Add-Type -AssemblyName System.Web

# =========================
# CONFIG (hardcoded)
# =========================
$LogFile = "C:\temp\BigFixOfferGenerator.log"
$CustomSiteName = "Test Group Managed (Workstations)"

# Fixlet Action name inside each Fixlet
$FixletActionName_Default = "Action1"

# Hardcoded group IDs for the two rounds
$QA_GroupIdWithPrefix     = "00-12345"
$Deploy_GroupIdWithPrefix = "00-67890"

# Offer settings
$OfferDefaults = @{
    PreActionShowUI = $false
    RetryCount      = 3
    RetryWaitISO    = "PT1H"
    StartOffsetISO  = "PT0S"        # starts now
    EndOffsetISO    = "P365DT0S"    # ends in 1 year
    Reapply         = $true
    ContinueOnErr   = $true
    ActiveUserReq   = "NoRequirement"
    ActiveUserType  = "AllUsers"
}

# Behavior toggles
$IgnoreCertErrors           = $true
$DumpFetchedXmlToTemp       = $true
$AggressiveRegexFallback    = $true
$SaveActionXmlToTemp        = $true
$PostUsingInvokeWebRequest  = $true

# =========================
# UTIL / LOGGING
# =========================
function Encode-SiteName([string]$Name) {
    $enc = [System.Web.HttpUtility]::UrlEncode($Name, [System.Text.Encoding]::UTF8)
    $enc = $enc -replace '\+','%20' -replace '\(','%28' -replace '\)','%29'
    return $enc
}
function Get-BaseUrl([string]$ServerInput) {
    if (-not $ServerInput) { throw "Server is empty." }
    $s = $ServerInput.Trim()
    if ($s -notmatch '^(?i)https?://') {
        if ($s -match ':\d+$') { $s = "https://$s" } else { $s = "https://$s:52311" }
    }
    return $s.TrimEnd('/')
}
function Join-ApiUrl([string]$BaseUrl,[string]$RelativePath) {
    $rp = if ($RelativePath.StartsWith("/")) { $RelativePath } else { "/$RelativePath" }
    $BaseUrl.TrimEnd('/') + $rp
}
function Get-AuthHeader([string]$User,[string]$Pass) {
    $pair  = "$User`:$Pass"
    $bytes = [System.Text.Encoding]::ASCII.GetBytes($pair)
    "Basic " + [Convert]::ToBase64String($bytes)
}
function LogLine($txt) {
    try {
        $line = "{0}  {1}" -f (Get-Date -Format 'u'), $txt
        if ($LogBox) { $LogBox.AppendText($line + "`r`n"); $LogBox.SelectionStart = $LogBox.Text.Length; $LogBox.ScrollToCaret() }
        Add-Content -Path $LogFile -Value $line
    } catch {}
}
function Get-NumericGroupId([string]$GroupIdWithPrefix) {
    if ($GroupIdWithPrefix -match '^\d{2}-(\d+)$') { return $Matches[1] }
    return ($GroupIdWithPrefix -replace '[^\d]','')
}
function SafeEscape([string]$s) {
    if ($null -eq $s) { return "" }
    [System.Security.SecurityElement]::Escape($s)
}
function To-XmlBool([bool]$b) { if ($b) { 'true' } else { 'false' } }

# Clean product name from Fixlet title (strip Install/Update/Remove prefixes, trailing " Win")
function Parse-FixletTitleToProduct([string]$Title) {
    $t = [string]$Title
    $t = $t -replace '^\s*(?i)(Install|Update|Remove)\s*[:\-]\s*',''
    $t = $t -replace '^\s*(?i)Update:\s*',''
    $t = $t -replace '\s+Win$',''
    $t.Trim()
}

function Truncate([string]$s,[int]$max=600) {
    if ([string]::IsNullOrWhiteSpace($s)) { return "" }
    if ($s.Length -le $max) { return $s.Trim() }
    return ($s.Substring(0,$max)).Trim() + "…"
}

# Build a compact, neutral prompt for a 1–3 sentence offer description
function Build-LLMPrompt([string]$displayName) {
@"
You are generating a short end-user description for a BigFix software offer.

Product: $displayName

Write 1–3 concise sentences in plain English describing what this offer does for the user (what will be installed/updated/removed and any notable highlights).
Avoid marketing fluff, versions in every sentence, and avoid system/IT jargon. No HTML or markdown. Keep it under ~90 words.
"@
}

# Call an internal LLM (supports OpenAI-style chat OR simple {prompt,model})
function Invoke-LLMDescription {
    param(
        [Parameter(Mandatory=$true)][string]$ApiUrl,
        [Parameter(Mandatory=$false)][string]$ApiKey,
        [Parameter(Mandatory=$false)][string]$Model = "gpt-internal-8k",
        [Parameter(Mandatory=$true)][string]$DisplayName,
        [int]$TimeoutMs = 20000
    )
    try {
        $prompt = Build-LLMPrompt -displayName $DisplayName
        $headers = @{}
        if ($ApiKey) { $headers["Authorization"] = "Bearer $ApiKey" }
        $headers["Content-Type"] = "application/json"

        # Decide payload shape
        $isOpenAI = $ApiUrl -match '/v1/(chat/)?completions'
        if ($isOpenAI) {
            $body = @{
                model = $Model
                messages = @(
                    @{ role="system"; content="You are a concise technical writer for end-user software offers." },
                    @{ role="user";   content=$prompt }
                )
                temperature = 0.3
                max_tokens  = 200
            }
        } else {
            # Generic schema used by many internal LLM gateways
            $body = @{
                model  = $Model
                prompt = $prompt
                temperature = 0.3
                max_tokens  = 200
            }
        }

        $json = $body | ConvertTo-Json -Depth 6
        $resp = Invoke-RestMethod -Method Post -Uri $ApiUrl -Headers $headers -Body $json -TimeoutSec ([math]::Ceiling($TimeoutMs/1000))
        
        # Try multiple response shapes
        $candidates = @()
        if ($resp -and $resp.choices -and $resp.choices.Count -gt 0) {
            # OpenAI-style
            if ($resp.choices[0].message.content) { $candidates += [string]$resp.choices[0].message.content }
            elseif ($resp.choices[0].text)        { $candidates += [string]$resp.choices[0].text }
        }
        if ($resp.description) { $candidates += [string]$resp.description }
        if ($resp.output)      { $candidates += [string]$resp.output }
        if ($resp.result)      { $candidates += [string]$resp.result }
        if ($resp.message)     { $candidates += [string]$resp.message }

        $txt = $null
        foreach ($c in $candidates) {
            if (-not [string]::IsNullOrWhiteSpace($c)) { $txt = $c; break }
        }

        if (-not $txt) { return $null }
        # Clean up whitespace; ensure single paragraph
        $txt = $txt -replace '\s+',' ' | ForEach-Object { $_.Trim() }
        return (Truncate $txt 600)
    }
    catch {
        LogLine ("❌ LLM call failed: {0}" -f ($_.Exception.GetBaseException().Message))
        return $null
    }
}

# =========================
# HTTP
# =========================
if ($IgnoreCertErrors) { try { [System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $true } } catch { } }
[System.Net.ServicePointManager]::Expect100Continue = $false

function HttpGetXml {
    param([string]$Url,[string]$AuthHeader)
    $req = [System.Net.HttpWebRequest]::Create($Url)
    $req.Method = "GET"
    $req.Accept = "application/xml"
    $req.Headers["Accept-Encoding"] = "gzip, deflate"
    $req.AutomaticDecompression = [System.Net.DecompressionMethods]::GZip -bor [System.Net.DecompressionMethods]::Deflate
    if ($AuthHeader) { $req.Headers["Authorization"] = $AuthHeader }
    $req.ProtocolVersion = [Version]"1.1"
    $req.PreAuthenticate = $true
    $req.AllowAutoRedirect = $false
    $req.Timeout = 45000
    try {
        $resp = $req.GetResponse()
        try {
            $sr = New-Object IO.StreamReader($resp.GetResponseStream(), [Text.Encoding]::UTF8)
            $content = $sr.ReadToEnd(); $sr.Close()
        } finally { $resp.Close() }
        return $content
    } catch {
        throw ($_.Exception.GetBaseException().Message)
    }
}

function Post-XmlFile-InFile {
    param([string]$Url,[string]$User,[string]$Pass,[string]$XmlFilePath)
    try {
        $pair  = "$User`:$Pass"
        $bytes = [System.Text.Encoding]::ASCII.GetBytes($pair)
        $basic = "Basic " + [Convert]::ToBase64String($bytes)
        $resp = Invoke-WebRequest -Method Post -Uri $Url `
            -Headers @{ "Authorization" = $basic } `
            -ContentType "application/xml" `
            -InFile $XmlFilePath `
            -UseBasicParsing
        if ($resp.Content) { LogLine "POST response: $($resp.Content)" }
    } catch {
        $respErr = $_.Exception.Response
        if ($respErr -and $respErr.GetResponseStream) {
            $rs = $respErr.GetResponseStream()
            $sr = New-Object IO.StreamReader($rs, [Text.Encoding]::UTF8)
            $errBody = $sr.ReadToEnd(); $sr.Close()
            throw "Invoke-WebRequest POST failed :: $errBody"
        }
        throw ($_.Exception.Message)
    }
}

# =========================
# FIXLET & GROUP PARSING
# =========================
function Get-FixletContainer { param([xml]$Xml)
    if ($Xml.BES.Fixlet)   { return @{ Type="Fixlet";   Node=$Xml.BES.Fixlet } }
    if ($Xml.BES.Task)     { return @{ Type="Task";     Node=$Xml.BES.Task } }
    if ($Xml.BES.Baseline) { return @{ Type="Baseline"; Node=$Xml.BES.Baseline } }
    throw "Unknown BES content type (no <Fixlet>, <Task>, or <Baseline>)."
}

function Extract-AllRelevanceFromXmlString {
    param([string]$XmlString,[string]$Context = "Unknown")
    $all = @()
    try {
        $x = [xml]$XmlString
        $cgRels = $x.SelectNodes("//*[local-name()='ComputerGroup']//*[local-name()='Relevance']")
        if ($cgRels) { foreach ($n in $cgRels) { $t = ($n.InnerText).Trim(); if ($t) { $all += $t } } }
        if ($all.Count -eq 0) {
            $globalRels = $x.SelectNodes("//*[local-name()='Relevance']")
            if ($globalRels) { foreach ($n in $globalRels) { $t = ($n.InnerText).Trim(); if ($t) { $all += $t } } }
        }
    } catch {}
    if ($AggressiveRegexFallback -and $all.Count -eq 0) {
        $regex = [regex]'(?is)<Relevance\b[^>]*>(.*?)</Relevance>'
        foreach ($mm in $regex.Matches($XmlString)) { $t = ($mm.Groups[1].Value).Trim(); if ($t) { $all += $t } }
    }
    return ,$all
}

function Extract-SCRFragments {
    param([string]$XmlString,[string]$Context="Unknown")
    $frags = @()
    try {
        $x = [xml]$XmlString
        $scrNodes = $x.SelectNodes("//*[local-name()='SearchComponentRelevance']")
        if ($scrNodes) {
            foreach ($n in $scrNodes) {
                $innerR = $n.SelectNodes(".//*[local-name()='Relevance']")
                if ($innerR -and $innerR.Count -gt 0) {
                    foreach ($ir in $innerR) { $t = ($ir.InnerText).Trim(); if ($t) { $frags += $t } }
                } else {
                    $t = ($n.InnerText).Trim(); if ($t) { $frags += $t }
                }
            }
        }
    } catch {}
    return ,$frags
}

function Get-GroupClientRelevance {
    param([string]$BaseUrl,[string]$AuthHeader,[string]$SiteName,[string]$GroupIdNumeric)
    $encSite = Encode-SiteName $SiteName
    $candidates = @(
        "/api/computergroup/custom/$encSite/$GroupIdNumeric",
        "/api/computergroup/master/$GroupIdNumeric",
        "/api/computergroup/operator/$($env:USERNAME)/$GroupIdNumeric"
    )
    foreach ($relPath in $candidates) {
        $url = Join-ApiUrl -BaseUrl $BaseUrl -RelativePath $relPath
        try {
            $xmlStr = HttpGetXml -Url $url -AuthHeader $AuthHeader
            if ($DumpFetchedXmlToTemp) {
                $tmp = Join-Path $env:TEMP ("BES_ComputerGroup_{0}.xml" -f $GroupIdNumeric)
                [System.IO.File]::WriteAllText($tmp, $xmlStr)
                LogLine "Saved fetched group XML to: $tmp"
            }
            $rels = Extract-AllRelevanceFromXmlString -XmlString $xmlStr -Context "Group:$GroupIdNumeric"
            if ($rels.Count -gt 0) {
                $joined = ($rels | ForEach-Object { "($_)" }) -join " AND "
                return $joined
            }
            $frags = Extract-SCRFragments -XmlString $xmlStr -Context "Group:$GroupIdNumeric"
            if ($frags.Count -gt 0) {
                $joined = ($frags | ForEach-Object { "($_)" }) -join " AND "
                return $joined
            }
            LogLine "No usable relevance at ${url}"
        } catch {
            LogLine ("❌ Group relevance fetch failed ({0}): {1}" -f $GroupIdNumeric, $_.Exception.Message)
        }
    }
    throw "No relevance found or derivable for group ${GroupIdNumeric}."
}

# =========================
# OFFER XML BUILDER (console title: "<Kind>: <DisplayName>: <Phase> Offer")
# =========================
function Build-OfferXml {
    param(
        [string]$UiBaseTitle,     # fixlet title (for console ActionUITitle context)
        [string]$DisplayName,     # derived from title for user-facing text
        [string]$SiteName,
        [string]$FixletId,
        [string]$FixletActionName,
        [string]$GroupRelevance,
        [string]$Kind,            # "Install" | "Update" | "Remove"
        [string]$Phase,           # "QA" | "Deploy"
        [string]$OfferDescription # from UI (Application Description)
    )

    # UI title should be just the clean product name
    $uiTitleMessage  = SafeEscape($DisplayName)
    $siteEsc         = SafeEscape($SiteName)
    $fixletIdEsc     = SafeEscape($FixletId)
    $actionNameEsc   = SafeEscape($FixletActionName)
    $groupSafe       = if ([string]::IsNullOrWhiteSpace($GroupRelevance)) { "" } else { $GroupRelevance }
    $groupSafe       = $groupSafe -replace ']]>', ']]]]><![CDATA[>'

    # Texts by kind
    switch -Regex ($Kind) {
        '^(?i)install$' { $ing='Installing'; $cat='Install'; $verb='install' }
        '^(?i)remove$'  { $ing='Removing' ; $cat='Remove' ; $verb='remove'  }
        default         { $ing='Updating' ; $cat='Update' ; $verb='update'  }
    }

    # Messages
    $runningMsg = SafeEscape(("({0} to {1}.  Please wait...)" -f $ing, $DisplayName))
    $offerTitle = SafeEscape(("{0}: {1}: {2} Offer" -f $cat, $DisplayName, $Phase))

    # HTML description for Offer tab
    $descFallback = "This offer will $verb $DisplayName."
    $descRaw = if ([string]::IsNullOrWhiteSpace($OfferDescription)) { $descFallback } else { $OfferDescription }
    # Encode as HTML and convert newlines to <br/>
    $descHtml = [System.Web.HttpUtility]::HtmlEncode($descRaw) -replace "`r?`n","<br/>"
    $offerCat = SafeEscape($cat)

@"
<?xml version="1.0" encoding="UTF-8"?>
<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
  <SourcedFixletAction>
    <SourceFixlet>
      <Sitename>$siteEsc</Sitename>
      <FixletID>$fixletIdEsc</FixletID>
      <Action>$actionNameEsc</Action>
    </SourceFixlet>
    <Target>
      <CustomRelevance><![CDATA[$groupSafe]]></CustomRelevance>
    </Target>
    <Settings>
      <!-- Messages -->
      <ActionUITitle>$uiTitleMessage</ActionUITitle>
      <PreActionShowUI>$(To-XmlBool $OfferDefaults.PreActionShowUI)</PreActionShowUI>
      <HasRunningMessage>true</HasRunningMessage>
      <RunningMessage><Text>$runningMsg</Text></RunningMessage>

      <!-- Execution -->
      <HasTimeRange>false</HasTimeRange>
      <HasStartTime>true</HasStartTime>
      <StartDateTimeLocalOffset>$($OfferDefaults.StartOffsetISO)</StartDateTimeLocalOffset>
      <HasEndTime>true</HasEndTime>
      <EndDateTimeLocalOffset>$($OfferDefaults.EndOffsetISO)</EndDateTimeLocalOffset>
      <UseUTCTime>false</UseUTCTime>

      <!-- Reapply & Retry -->
      <Reapply>$(To-XmlBool $OfferDefaults.Reapply)</Reapply>
      <HasReapplyLimit>false</HasReapplyLimit>
      <HasReapplyInterval>false</HasReapplyInterval>
      <HasRetry>true</HasRetry>
      <RetryCount>$($OfferDefaults.RetryCount)</RetryCount>
      <RetryWait Behavior="WaitForInterval">$($OfferDefaults.RetryWaitISO)</RetryWait>

      <!-- Defaults -->
      <ActiveUserRequirement>$($OfferDefaults.ActiveUserReq)</ActiveUserRequirement>
      <ActiveUserType>$($OfferDefaults.ActiveUserType)</ActiveUserType>
      <HasWhose>false</HasWhose>
      <PreActionCacheDownload>false</PreActionCacheDownload>
      <HasTemporalDistribution>false</HasTemporalDistribution>
      <ContinueOnErrors>$(To-XmlBool $OfferDefaults.ContinueOnErr)</ContinueOnErrors>
      <PostActionBehavior Behavior="Nothing"></PostActionBehavior>

      <!-- Offer tab -->
      <IsOffer>true</IsOffer>
      <OfferCategory>$offerCat</OfferCategory>
      <OfferDescriptionHTML><![CDATA[$descHtml]]></OfferDescriptionHTML>
    </Settings>

    <!-- Console action title -->
    <Title>$offerTitle</Title>
  </SourcedFixletAction>
</BES>
"@
}

# =========================
# GUI (root grid: inputs → buttons → log)
# =========================
$form = New-Object System.Windows.Forms.Form
$form.Text = "BigFix Offer Action Generator"
$form.StartPosition = "CenterScreen"
$form.Size = New-Object System.Drawing.Size(900, 740)
$form.MinimumSize = New-Object System.Drawing.Size(900, 620)

# Root layout (3 rows)
$root = New-Object System.Windows.Forms.TableLayoutPanel
$root.Dock = 'Fill'
$root.AutoSize = $false
$root.RowCount = 3
$root.ColumnCount = 1
$root.Padding = '10,10,10,10'
$root.RowStyles.Add((New-Object System.Windows.Forms.RowStyle([System.Windows.Forms.SizeType]::AutoSize)))     # inputs
$root.RowStyles.Add((New-Object System.Windows.Forms.RowStyle([System.Windows.Forms.SizeType]::AutoSize)))     # buttons
$root.RowStyles.Add((New-Object System.Windows.Forms.RowStyle([System.Windows.Forms.SizeType]::Percent,100)))  # log fill
$root.ColumnStyles.Add((New-Object System.Windows.Forms.ColumnStyle([System.Windows.Forms.SizeType]::Percent,100)))
$form.Controls.Add($root)

# ----- Inputs grid (labels/fields) -----
$grid = New-Object System.Windows.Forms.TableLayoutPanel
$grid.Dock = 'Top'
$grid.AutoSize = $true
$grid.AutoSizeMode = 'GrowAndShrink'
$grid.ColumnCount = 2
$grid.ColumnStyles.Add((New-Object System.Windows.Forms.ColumnStyle([System.Windows.Forms.SizeType]::Absolute, 240)))  # labels
$grid.ColumnStyles.Add((New-Object System.Windows.Forms.ColumnStyle([System.Windows.Forms.SizeType]::Percent, 100)))  # inputs

function Add-Row([string]$labelText, [System.Windows.Forms.Control]$ctrl) {
    $lbl = New-Object System.Windows.Forms.Label
    $lbl.Text = $labelText
    $lbl.AutoSize = $true
    $lbl.Margin = '0,6,12,6'

    $ctrl.Margin = '0,2,0,6'
    $ctrl.Anchor = 'Left,Right'

    $grid.RowCount += 1
    $grid.RowStyles.Add((New-Object System.Windows.Forms.RowStyle([System.Windows.Forms.SizeType]::AutoSize)))
    $grid.Controls.Add($lbl, 0, $grid.RowCount - 1)
    $grid.Controls.Add($ctrl, 1, $grid.RowCount - 1)
}

# Server (locked, white background)
$tbServer = New-Object System.Windows.Forms.TextBox
$tbServer.Text = "https://test.server:52311"
$tbServer.ReadOnly = $true
$tbServer.BackColor = [System.Drawing.SystemColors]::Window
Add-Row "BigFix Server:" $tbServer

# Username / Password
$tbUser = New-Object System.Windows.Forms.TextBox
Add-Row "Username:" $tbUser

$tbPass = New-Object System.Windows.Forms.MaskedTextBox
$tbPass.PasswordChar = '*'
Add-Row "Password:" $tbPass

# LLM API fields
$tbApiUrl  = New-Object System.Windows.Forms.TextBox
$tbApiUrl.Text = "https://llm.yourdomain/v1/chat/completions"   # change to your gateway
Add-Row "LLM API URL:" $tbApiUrl

$tbApiKey  = New-Object System.Windows.Forms.MaskedTextBox
$tbApiKey.PasswordChar = '*'
Add-Row "LLM API Key:" $tbApiKey

$tbModel   = New-Object System.Windows.Forms.TextBox
$tbModel.Text = "gpt-internal-8k"
Add-Row "LLM Model:" $tbModel

# Fixlet IDs
$tbFixletInstall = New-Object System.Windows.Forms.TextBox
Add-Row "Fixlet ID (Install):" $tbFixletInstall

$tbFixletUpdate = New-Object System.Windows.Forms.TextBox
Add-Row "Fixlet ID (Update):" $tbFixletUpdate

$tbFixletRemove = New-Object System.Windows.Forms.TextBox
Add-Row "Fixlet ID (Remove):" $tbFixletRemove

# Application Description (multiline)
$tbAppDesc = New-Object System.Windows.Forms.TextBox
$tbAppDesc.Multiline = $true
$tbAppDesc.ScrollBars = 'Vertical'
$tbAppDesc.Height = 120
$tbAppDesc.Anchor = 'Left,Right'
$tbAppDesc.Margin = '0,2,0,6'
$lblDesc = New-Object System.Windows.Forms.Label
$lblDesc.Text = "Application Description (Offer tab):"
$lblDesc.AutoSize = $true
$lblDesc.Margin = '0,6,12,6'
$grid.RowCount += 1
$grid.RowStyles.Add((New-Object System.Windows.Forms.RowStyle([System.Windows.Forms.SizeType]::AutoSize)))
$grid.Controls.Add($lblDesc, 0, $grid.RowCount - 1)
$grid.Controls.Add($tbAppDesc, 1, $grid.RowCount - 1)

# Button to draft description via LLM (under the description box)
$btnLLM = New-Object System.Windows.Forms.Button
$btnLLM.Text = "Draft Description with LLM"
$btnLLM.Height = 28
$btnLLM.Width  = 240
$btnLLM.Anchor = 'Left'
Add-Row "" $btnLLM

# Add inputs grid to root row 0
$root.Controls.Add($grid, 0, 0)

# ----- Buttons row (under inputs) -----
$btnPanel = New-Object System.Windows.Forms.TableLayoutPanel
$btnPanel.Dock = 'Top'
$btnPanel.AutoSize = $true
$btnPanel.AutoSizeMode = 'GrowAndShrink'
$btnPanel.ColumnCount = 1
$btnPanel.ColumnStyles.Add((New-Object System.Windows.Forms.ColumnStyle([System.Windows.Forms.SizeType]::Percent,100)))

$btnQA = New-Object System.Windows.Forms.Button
$btnQA.Text = "Create QA Offers (Install / Update / Remove)"
$btnQA.Height = 36
$btnQA.Dock = 'Top'
$btnQA.Margin = '0,4,0,6'
$btnPanel.Controls.Add($btnQA)

$btnDeploy = New-Object System.Windows.Forms.Button
$btnDeploy.Text = "Create Deploy Offers (Install / Update / Remove)"
$btnDeploy.Height = 36
$btnDeploy.Dock = 'Top'
$btnDeploy.Margin = '0,0,0,6'
$btnPanel.Controls.Add($btnDeploy)

# Add buttons panel to root row 1
$root.Controls.Add($btnPanel, 0, 1)

# ----- Log box (fills remaining space) -----
$LogBox = New-Object System.Windows.Forms.TextBox
$LogBox.Multiline = $true
$LogBox.ScrollBars = 'Vertical'
$LogBox.ReadOnly = $false
$LogBox.WordWrap = $false
$LogBox.Dock = 'Fill'
$LogBox.Margin = '0,6,0,0'
$LogBox.ContextMenu = New-Object System.Windows.Forms.ContextMenu
$LogBox.ContextMenu.MenuItems.AddRange(@(
    (New-Object System.Windows.Forms.MenuItem "Copy",       { $LogBox.Copy() }),
    (New-Object System.Windows.Forms.MenuItem "Select All", { $LogBox.SelectAll() })
))
# Add log to root row 2
$root.Controls.Add($LogBox, 0, 2)

# =========================
# CORE: confirm + post
# =========================
function Build-OfferXml-Wrapper {
    param(
        [string]$Kind,
        [string]$Phase,
        [string]$CustomSiteName,
        [string]$FixletId,
        [string]$FixletActionName,
        [string]$GroupRelevance,
        [string]$TitleFromServer,
        [string]$OfferDescriptionFromUi
    )
    $dispName = Parse-FixletTitleToProduct -Title $TitleFromServer
    return (Build-OfferXml `
        -UiBaseTitle          $TitleFromServer `
        -DisplayName          $dispName `
        -SiteName             $CustomSiteName `
        -FixletId             $FixletId `
        -FixletActionName     $FixletActionName `
        -GroupRelevance       $GroupRelevance `
        -Kind                 $Kind `
        -Phase                $Phase `
        -OfferDescription     $OfferDescriptionFromUi)
}

function Confirm-And-Post-Offers {
    param(
        [string]$Phase,                 # "QA" or "Deploy"
        [string]$Server,
        [string]$User,
        [string]$Pass,
        [string]$FixletInstall,
        [string]$FixletUpdate,
        [string]$FixletRemove,
        [string]$OfferDescriptionFromUi
    )

    $LogBox.Clear()
    LogLine "== Begin $Phase Offers =="

    if (-not ($Server -and $User -and $Pass -and $FixletInstall -and $FixletUpdate -and $FixletRemove)) {
        LogLine "❌ Fill Server, Username, Password, and all 3 Fixlet IDs."
        return
    }

    try {
        $base = Get-BaseUrl $Server
        $encodedSite = Encode-SiteName $CustomSiteName
        $auth = Get-AuthHeader -User $User -Pass $Pass
        $postUrl = Join-ApiUrl -BaseUrl $base -RelativePath "/api/actions"
        LogLine "POST URL: ${postUrl}"

        # Pull titles
        $ids = @($FixletInstall,$FixletUpdate,$FixletRemove)
        $titles = @()
        foreach ($fx in $ids) {
            $fixUrl = Join-ApiUrl -BaseUrl $base -RelativePath "/api/fixlet/custom/$encodedSite/$fx"
            $xmlStr = HttpGetXml -Url $fixUrl -AuthHeader $auth
            if ($DumpFetchedXmlToTemp) {
                $tmpFix = Join-Path $env:TEMP ("BES_Fixlet_{0}.xml" -f $fx)
                [System.IO.File]::WriteAllText($tmpFix, $xmlStr)
                LogLine "Saved fetched fixlet XML to: $tmpFix"
            }
            $x = [xml]$xmlStr
            $node = (Get-FixletContainer -Xml $x).Node
            $title = [string]$node.Title
            if (-not $title) { $title = "(Unknown Title: $fx)" }
            $titles += $title
        }

        # Group relevance (hardcoded groups)
        $groupRaw = if ($Phase -ieq "QA") { $QA_GroupIdWithPrefix } else { $Deploy_GroupIdWithPrefix }
        $groupNum = Get-NumericGroupId $groupRaw
        if (-not $groupNum) { throw "Could not parse numeric ID from '$groupRaw'." }
        LogLine "Fetching group relevance for $Phase (group $groupNum)"
        $groupRel = Get-GroupClientRelevance -BaseUrl $base -AuthHeader $auth -SiteName $CustomSiteName -GroupIdNumeric $groupNum

        # Confirm
        $lines = @(
            "Round: $Phase",
            "Group: $groupRaw",
            "Fixlets:",
            " - Install: " + $titles[0],
            " - Update : " + $titles[1],
            " - Remove : " + $titles[2],
            "",
            "Create OFFER actions for these 3 fixlets?"
        )
        $msg = [string]::Join("`r`n",$lines)
        $dlg = [System.Windows.Forms.MessageBox]::Show(
            $form, $msg, "Confirm: Create $Phase Offers",
            [System.Windows.Forms.MessageBoxButtons]::YesNo,
            [System.Windows.Forms.MessageBoxIcon]::Question,
            [System.Windows.Forms.MessageBoxDefaultButton]::Button2
        )
        if ($dlg -ne [System.Windows.Forms.DialogResult]::Yes) {
            LogLine "🚫 User canceled."
            return
        }

        # Post each
        $triples = @(
            @{ Name="Install"; FixId=$FixletInstall; Title=$titles[0] },
            @{ Name="Update";  FixId=$FixletUpdate;  Title=$titles[1] },
            @{ Name="Remove";  FixId=$FixletRemove;  Title=$titles[2] }
        )

        foreach ($t in $triples) {
            $xmlBody = Build-OfferXml-Wrapper `
                -Kind $t.Name `
                -Phase $Phase `
                -CustomSiteName $CustomSiteName `
                -FixletId $t.FixId `
                -FixletActionName $FixletActionName_Default `
                -GroupRelevance $groupRel `
                -TitleFromServer $t.Title `
                -OfferDescriptionFromUi $OfferDescriptionFromUi

            $safeTitle = ($t.Name -replace '[^\w\-. ]','_') -replace '\s+','_'
            $tmpAction = Join-Path $env:TEMP ("BES_Offer_{0}_{1:yyyyMMdd_HHmmss}.xml" -f $safeTitle,(Get-Date))
            if ($SaveActionXmlToTemp) {
                [System.IO.File]::WriteAllText($tmpAction, $xmlBody)
                LogLine "Saved OFFER action XML for $($t.Name) to: $tmpAction"
                LogLine ("curl -k -u USER:PASS -H `"Content-Type: application/xml`" -d @`"$tmpAction`" {0}" -f $postUrl)
            }

            try {
                if ($PostUsingInvokeWebRequest -and (Test-Path $tmpAction)) {
                    Post-XmlFile-InFile -Url $postUrl -User $User -Pass $Pass -XmlFilePath $tmpAction
                } else {
                    LogLine "⚠️ Direct POST path disabled; enable if needed."
                }
                LogLine ("✅ OFFER posted: {0}" -f $t.Name)
            } catch {
                LogLine ("❌ OFFER POST failed for {0}: {1}" -f $t.Name, $_.Exception.Message)
            }
        }

        LogLine "All $Phase offers attempted. Log file: $LogFile"
    }
    catch {
        LogLine ("❌ Fatal error ($Phase): {0}" -f ($_.Exception.GetBaseException().Message))
    }
}

# Wire up buttons
$btnQA.Add_Click({
    Confirm-And-Post-Offers `
        -Phase "QA" `
        -Server $tbServer.Text `
        -User $tbUser.Text `
        -Pass $tbPass.Text `
        -FixletInstall $tbFixletInstall.Text `
        -FixletUpdate  $tbFixletUpdate.Text `
        -FixletRemove  $tbFixletRemove.Text `
        -OfferDescriptionFromUi $tbAppDesc.Text
})
$btnDeploy.Add_Click({
    Confirm-And-Post-Offers `
        -Phase "Deploy" `
        -Server $tbServer.Text `
        -User $tbUser.Text `
        -Pass $tbPass.Text `
        -FixletInstall $tbFixletInstall.Text `
        -FixletUpdate  $tbFixletUpdate.Text `
        -FixletRemove  $tbFixletRemove.Text `
        -OfferDescriptionFromUi $tbAppDesc.Text
})

# LLM draft button
$btnLLM.Add_Click({
    try {
        if ([string]::IsNullOrWhiteSpace($tbServer.Text) -or
            [string]::IsNullOrWhiteSpace($tbUser.Text)   -or
            [string]::IsNullOrWhiteSpace($tbPass.Text)) {
            [System.Windows.Forms.MessageBox]::Show($form, "Enter Server, Username and Password first.", "Missing Credentials", 'OK', 'Warning') | Out-Null
            return
        }
        $fx = $tbFixletInstall.Text
        if ([string]::IsNullOrWhiteSpace($fx)) {
            LogLine "❌ Enter 'Fixlet ID (Install)' first so I can infer the product name."
            [System.Windows.Forms.MessageBox]::Show($form, "Enter the Install Fixlet ID first so I can derive the product name from its title.", "Need Install Fixlet ID", "OK", "Information") | Out-Null
            return
        }
        $base = Get-BaseUrl $tbServer.Text
        $encodedSite = Encode-SiteName $CustomSiteName
        $auth = Get-AuthHeader -User $tbUser.Text -Pass $tbPass.Text

        $fixUrl = Join-ApiUrl -BaseUrl $base -RelativePath "/api/fixlet/custom/$encodedSite/$fx"
        $xmlStr = HttpGetXml -Url $fixUrl -AuthHeader $auth
        $x      = [xml]$xmlStr
        $node   = (Get-FixletContainer -Xml $x).Node
        $title  = [string]$node.Title
        if (-not $title) { $title = "(Unknown Title: $fx)" }
        $displayName = Parse-FixletTitleToProduct -Title $title

        LogLine ("LLM drafting for product: {0}" -f $displayName)

        $desc = Invoke-LLMDescription `
            -ApiUrl $tbApiUrl.Text `
            -ApiKey $tbApiKey.Text `
            -Model  $tbModel.Text `
            -DisplayName $displayName

        if ($desc) {
            $tbAppDesc.Text = $desc
            LogLine "✅ LLM description generated and inserted."
        } else {
            LogLine "⚠️ LLM returned no description; leaving the box unchanged."
            [System.Windows.Forms.MessageBox]::Show($form, "The LLM didn’t return a description. You can type one manually.", "No Description", 'OK', 'Warning') | Out-Null
        }
    } catch {
        LogLine ("❌ LLM draft failed: {0}" -f ($_.Exception.GetBaseException().Message))
        [System.Windows.Forms.MessageBox]::Show($form, "LLM draft failed. Check the log for details.", "Error", 'OK', 'Error') | Out-Null
    }
})

$form.Topmost = $false
[void]$form.ShowDialog()
